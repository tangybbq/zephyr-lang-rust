# Description of how to augment the devicetree for Rust.
#
# Each entry describes an augmentation that will be added to matching nodes in the device tree.
# The full syntax is described (indirectly) in `zephyr-build/src/devicetree/config.rs`.

# Gpio controllers match for every node that has a `gpio-controller` property.  This is one of the
# few instances were we can actually just match on a property.
- name: gpio-controller
  rules:
  - type: has_prop
    value: gpio-controller
  actions:
  - type: instance
    value:
      raw:
        type: myself
      device: crate::device::gpio::Gpio

# The gpio-leds node will have #children nodes describing each led.  We'll match on the parent
# having this compatible property.  The nodes themselves are built out of the properties associated
# with each gpio.
- name: gpio-leds
  rules:
  - type: compatible
    value:
      names:
      - gpio-leds
      level: 1
  actions:
  - type: instance
    value:
      raw:
        type: phandle
        value: gpios
      device: crate::device::gpio::GpioPin

# Flash controllers don't have any particular property to identify them, so we need a list of
# compatible values that should match.
- name: flash-controller
  rules:
  - type: compatible
    value:
      names:
      - "nordic,nrf52-flash-controller"
      - "nordic,nrf51-flash-controller"
      - "raspberrypi,pico-flash-controller"
      level: 0
  actions:
  - type: instance
    value:
      raw:
        type: myself
      device: crate::device::flash::FlashController

# Flash partitions exist as children of a node compatible with "soc-nv-flash" that itself is a child
# of the controller itself.
# TODO: Get the write and erase property from the DT if present.
- name: flash-partition
  rules:
  - type: compatible
    value:
      names:
      - "fixed-partitions"
      level: 1
  - type: compatible
    value:
      names:
      - "soc-nv-flash"
      level: 2
  actions:
  - type: instance
    value:
      raw:
        type: parent
        value:
          level: 3
          args:
          - type: reg
      device: "crate::device::flash::FlashPartition"

# Uart devices.  This just has to be a list of devices that implement this interface.
- name: uart
  rules:
  - type: compatible
    value:
      names:
      - "arm,pl011"
      # The nordic driver needs to be separate because they have a separate Kconfig for each uart
      # block.
      # - "nordic,nrf-uarte"
      - "zephyr,cdc-acm-uart"
      level: 0
  actions:
  - type: instance
    value:
      raw:
        type: myself
      device: "crate::device::uart::Uart"
      kconfig: CONFIG_SERIAL

- name: led-strip
  rules:
  - type: or
    value:
    - type: compatible
      value:
        names:
        - "worldsemi,wd2812-spi"
        level: 0
    - type: compatible
      value:
        names:
        - "worldsemi,ws2812-rpi_pico-pio"
        level: 1
  actions:
  - type: instance
    value:
      raw:
        type: myself
      device: "crate::device::led_strip::LedStrip"
      kconfig: CONFIG_LED_STRIP

# This doesn't really belong here, and can be moved once we support modules having their own augment
# files.
- name: bbq-kbd-matrix
  rules:
  - type: compatible
    value:
      names:
      - "bbq-kbd-matrix"
      level: 0
  actions:
  - type: gpio_pins
    value:
      property: "row-gpios"
      getter: "get_rows"
  - type: gpio_pins
    value:
      property: "col-gpios"
      getter: "get_cols"

# Generate a pseudo node that matches all of the labels across the tree with their nodes.
- name: labels
  rules:
    - type: root
  actions:
  - type: labels

